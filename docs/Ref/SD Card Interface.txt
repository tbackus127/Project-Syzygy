:: FPGA Pins ::

Physical Pin Layout
  654321
  CBA987

1: CS/DAT3
2: MOSI (Command)
3: MISO (Data)
4: Clock
5: Ground
6: Power
7: DAT1
8: DAT2
9: Card detect
10: Write Protect
11: Ground
12: Power

:: Acronyms ::

CS - Chip Select (0 for SPI mode)
MOSI - Master Out, Slave In (Write to)
MISO - Master In, Slave Out (Read from)
SCK - Serial Clock
CD - Card Detection
WP - Write Protection

:: References ::

http://nerdclub-uk.blogspot.com/2012/11/how-spi-works-with-sd-card.html
http://nerdclub-uk.blogspot.com/2012/11/reading-and-writing-to-single-sector-on.html
https://luckyresistor.me/cat-protector/software/sdcard-3/
https://github.com/xesscorp/VHDL_Lib/blob/master/SDCard.vhd

:: Notes ::

MOSI and MISO are duplex (same time) and serial
SPI is not time dependant (clk happens when master decides)
After executing a command, SD card remains in busy state; poll it for ready (SD holds output pin at 1)  
Use shift registers
Just send 0xFF as dummy data for one-way
Start every transaction by setting CS low
Valid data block CRC = x^16 + x^12 + x^5 + 1
IMPLEMENT WITH STATE MACHINES!

:: SD Card commands ::

  <1 byte command><4 byte params><1 byte checksum>
  Specifically: 0 1 <Command Number (6 bits)> <Arguments (32 bits)> <CRC (7 bits)> 1

  Command format: bit 6 must be 1 for command (0100_0000, 0x40)

  Command 1: 0x40
  Command 2: 0x41
  ... etc
  
  CMD0 - Reset into idle state (resp: R1)
  CMD8 - Voltage check (may be necessary for v2.0 cards)
  CMD12 - Stop transmission (resp: R1 with optional trailing busy signal (zero; non-zero = ready))
  CMD13 - Send status (resp: R2)
  CMD17 - Read single block (responds with response token (R1) followed by data token)
  CMD18 - Read multiple blocks (resp: R1)
  CMD24 - Write single block (resp: R1)
  CMD25 - Write multiple blocks (resp: R1)
  CMD58 - Card ID (resp: R3)
  ACMD41 - Send host capacity support (bit 30), activates init process (resp: R1), is actually CMD55 followed by CMD41)

:: Response token formats ::

> R1 - One byte, bit 7 always 0; errors = 1, OK = 0
    0: In idle state
    1: Erase reset
    2: Illegal command
    3: CRC error
    4: Erase sequence error
    5: Address error
    6: Parameter error

> Data response - One byte
    xxx0sss1
      s: 010=Accepted; 101=CRC error; 110=Write error

:: SD Card initialization (For SDHC cards) ::

  1. Set clock to < 400khz
  2. Set CS to 1, MOSI to 1
  3. Send about 80-120 clock pulses, set CS to 0
  4. Send CMD0 (0x40 00 00 00 00 95, Reset)
  5. Check response (if not in idle state, send again until it is)
  6. Send CMD8 (0x48 00 00 01 AA 87, Check voltage)
  7. Get response (ignored)
  8. Send CMD55 (0x77 00 00 00 00 FF, App Mode)
  9. Send CMD41 (0x69 40 00 00 00 FF)
 10. Check ACMD41 response (if not in idle state, send CMD55+CMD41 again until it is)
 11. Set clock to higher speed
 12. Wait for R/W command from host

* Re-assert CS low at the start of each command!
* After sending a command, send 0xFF until 0x00 is recieved as a response (except CMD0 response is 0x01).
* Send an extra 0xFF after getting the 0xFF response to give the card some time.
* Most cards require 8-10 to be repeated.



>> Reading from a specific sector

  1. Send CMD17 with sector number: (0x51 nn nn nn nn nn 00)
  2. Send dummy data until recieve 512 bytes.
  3. Close the sector (how?)
  


>> Write to a specific sector

  1. Send CMD24 with sector number: (0x58 nn nn nn nn nn 00)
  2. Send data, recieve dummy data until 512 bytes are transferred. Every data block has a prefix of 'Start Block' token (one byte)
  3. Close the sector (how?)








