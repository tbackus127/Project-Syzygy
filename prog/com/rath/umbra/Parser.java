/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package com.rath.umbra;

import java.io.*;
import java.util.List;
import java.util.ArrayList;

public class Parser implements ParserConstants {

  public Program parse() {

    try {
      return PROGRAM();
    } catch (TokenMgrError tme) {
      System.err.println(tme.getMessage);
      return null;
    } catch (ParseException pe) {
      System.err.println(pe.getMessage);
      return null;
    }

  }

// --------------------------------------------------------------------------------------------------------------------
// Grammar
  final public 
Program PROGRAM() throws ParseException {
    trace_call("PROGRAM");
    try {List<ParamDeclaration> paramDeclList = new ArrayList<ParamDeclaration>();
  List<FunctionDeclaration> funcDeclList = new ArrayList<FunctionDeclaration>();
  MainDeclaration mainDecl;
  ParamDeclaration pd;
  FunctionDeclaration fd;
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 36:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        pd = PARAM_DECLARATION();
paramDeclList.add(pd);
      }
      mainDecl = MAIN_DECLARATION();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 40:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        fd = FUNCTION_DECLARATION();
funcDeclList.add(fd);
      }
      jj_consume_token(0);
{if ("" != null) return new Program(paramDeclList, mainDecl, funcDeclList);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PROGRAM");
    }
  }

  final public MainDeclaration MAIN_DECLARATION() throws ParseException {
    trace_call("MAIN_DECLARATION");
    try {StatementList body;
      jj_consume_token(39);
      jj_consume_token(24);
      body = STATEMENT_LIST();
      jj_consume_token(25);
{if ("" != null) return new MainDeclaration(body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("MAIN_DECLARATION");
    }
  }

  final public FunctionDeclaration FUNCTION_DECLARATION() throws ParseException {
    trace_call("FUNCTION_DECLARATION");
    try {Token name;
  ArgList argList;
  StatementList body;
      jj_consume_token(40);
      name = jj_consume_token(IDENTIFIER);
      jj_consume_token(SEP_LPAREN);
      argList = ARG_LIST();
      jj_consume_token(SEP_RPAREN);
      jj_consume_token(24);
      body = STATEMENT_LIST();
      jj_consume_token(25);
{if ("" != null) return new FunctionDeclaration(name, argList, body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FUNCTION_DECLARATION");
    }
  }

  final public ParamDeclaration PARAM_DECLARATION() throws ParseException {
    trace_call("PARAM_DECLARATION");
    try {Token id;
  Token value;
      jj_consume_token(36);
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(OP_EQUAL);
      value = jj_consume_token(LIT_GENERAL);
      jj_consume_token(29);
{if ("" != null) return new ParamDeclaration(id, value);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("PARAM_DECLARATION");
    }
  }

  final public ArgList ARG_LIST() throws ParseException {
    trace_call("ARG_LIST");
    try {ArgListHead head;
  List<ArgListTail> tail = new ArrayList<ArgListTail>();
  ArgListTail t;
      head = ARG_LIST_HEAD();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 28:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        t = ARG_LIST_TAIL();
tail.add(t);
      }
{if ("" != null) return new ArgList(head, tail);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ARG_LIST");
    }
  }

  final public ArgListHead ARG_LIST_HEAD() throws ParseException {
    trace_call("ARG_LIST_HEAD");
    try {Token id;
      jj_consume_token(34);
      id = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Variable(id.image());}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ARG_LIST_HEAD");
    }
  }

  final public ArgListTail ARG_LIST_TAIL() throws ParseException {
    trace_call("ARG_LIST_TAIL");
    try {Token id;
      jj_consume_token(28);
      jj_consume_token(34);
      id = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Variable(id.image());}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("ARG_LIST_TAIL");
    }
  }

  final public StatementList STATEMENT_LIST() throws ParseException {
    trace_call("STATEMENT_LIST");
    try {List<Statement> list = new ArrayList<Statement>();
  Statement st;
      label_4:
      while (true) {
        st = STATEMENT();
list.add(st);
        if (jj_2_1(2)) {
          ;
        } else {
          break label_4;
        }
      }
{if ("" != null) return new StatementList(list);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("STATEMENT_LIST");
    }
  }

  final public Statement STATEMENT() throws ParseException {
    trace_call("STATEMENT");
    try {Operation operation;
  ControlStructure controlStructure;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP_EXCL:
      case SEP_LPAREN:
      case 33:
      case 34:
      case 35:
      case 42:
      case IDENTIFIER:
      case REFERENCE:
      case LIT_GENERAL:{
        operation = OPERATION();
{if ("" != null) return new Operation(operation);}
        break;
        }
      case 37:
      case 41:
      case 43:{
        controlStructure = CONTROL_STRUCTURE();
{if ("" != null) return new ControlStructure(controlStructure);}
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("STATEMENT");
    }
  }

  final public Operation OPERATION() throws ParseException {
    trace_call("OPERATION");
    try {SetOperation setOperation;
  VarDeclaration varDeclaration;
  VarInitialization varInitialization;
  ReturnOperation returnOperation;
  Expression expr;
      if (jj_2_2(3)) {
        setOperation = SET_OPERATION();
{if ("" != null) return new SetOperation(setOperation);}
      } else if (jj_2_3(3)) {
        varDeclaration = VAR_DECLARATION();
{if ("" != null) return new VarDeclaration(varDeclaration);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 34:{
          varInitialization = VAR_INITIALIZATION();
{if ("" != null) return new VarInitialization(varInitialization);}
          break;
          }
        case 42:{
          returnOperation = RETURN_OPERATION();
{if ("" != null) return new ReturnOperation(returnOperation);}
          break;
          }
        case OP_EXCL:
        case SEP_LPAREN:
        case 33:
        case IDENTIFIER:
        case REFERENCE:
        case LIT_GENERAL:{
          expr = EXPRESSION();
{if ("" != null) return new Expression(expr);}
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(29);
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("OPERATION");
    }
  }

  final public ControlStructure CONTROL_STRUCTURE() throws ParseException {
    trace_call("CONTROL_STRUCTURE");
    try {ConditionalBranch conditionalBranch;
   WhileLoop whileLoop;
   ForLoop forLoop;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 37:{
        conditionalBranch = CONDITIONAL_BRANCH();
{if ("" != null) return new ConditionalBranch(conditionalBranch);}
        break;
        }
      case 43:{
        whileLoop = WHILE_LOOP();
{if ("" != null) return new WhileLoop(whileLoop);}
        break;
        }
      case 41:{
        forLoop = FOR_LOOP();
{if ("" != null) return new ForLoop(forLoop);}
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("CONTROL_STRUCTURE");
    }
  }

  final public SetOperation SET_OPERATION() throws ParseException {
    trace_call("SET_OPERATION");
    try {Token id;
  Expression expr;
      jj_consume_token(35);
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(OP_EQUAL);
      expr = EXPRESSION();
{if ("" != null) return new SetOperation(id, expr);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("SET_OPERATION");
    }
  }

  final public VarDeclaration VAR_DECLARATION() throws ParseException {
    trace_call("VAR_DECLARATION");
    try {Token id;
      jj_consume_token(34);
      id = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Variable(id.image());}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("VAR_DECLARATION");
    }
  }

  final public VarInitialization VAR_INITIALIZATION() throws ParseException {
    trace_call("VAR_INITIALIZATION");
    try {Token id;
  Expression expr;
      jj_consume_token(34);
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(OP_EQUAL);
      expr = EXPRESSION();
{if ("" != null) return new VarInitialization(id, expr);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("VAR_INITIALIZATION");
    }
  }

  final public ReturnOperation RETURN_OPERATION() throws ParseException {
    trace_call("RETURN_OPERATION");
    try {Expression expr;
      jj_consume_token(42);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP_EXCL:
      case SEP_LPAREN:
      case 33:
      case IDENTIFIER:
      case REFERENCE:
      case LIT_GENERAL:{
        expr = EXPRESSION();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        ;
      }
{if ("" != null) return new ReturnOperation(expr);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("RETURN_OPERATION");
    }
  }

  final public ConditionalBranch CONDITIONAL_BRANCH() throws ParseException {
    trace_call("CONDITIONAL_BRANCH");
    try {Expression ifExpr;
  List<Expression> elsifExprList = new ArrayList<Expression>();
  Expression elseExpr;

  StatementList ifBody;
  List<StatementList> elsifStatementBodyList = new ArrayList<StatementList>();
  Expression elseBody;

  Expression elsifExpr;
  StatementList elsifStatementList;
      jj_consume_token(37);
      jj_consume_token(SEP_LPAREN);
      ifExpr = EXPRESSION();
      jj_consume_token(SEP_RPAREN);
      jj_consume_token(24);
      ifBody = STATEMENT_LIST();
      jj_consume_token(25);
      label_5:
      while (true) {
        if (jj_2_4(2)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(38);
        jj_consume_token(37);
        jj_consume_token(SEP_LPAREN);
        elsifExpr = EXPRESSION();
elsifExprList.add(elsifExpr);
        jj_consume_token(SEP_RPAREN);
        jj_consume_token(24);
        elsifStatementList = STATEMENT_LIST();
elsifStatementBodyList.add(elsifStatementList);
        jj_consume_token(25);
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 38:{
        jj_consume_token(38);
        jj_consume_token(SEP_LPAREN);
        elseExpr = EXPRESSION();
        jj_consume_token(SEP_RPAREN);
        jj_consume_token(24);
        elseBody = STATEMENT_LIST();
        jj_consume_token(25);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        ;
      }
{if ("" != null) return new ConditionalBranch(ifExpr, elsifExprList, elseExpr, ifBody, elsifStatementBodyList, elseBody);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("CONDITIONAL_BRANCH");
    }
  }

  final public WhileLoop WHILE_LOOP() throws ParseException {
    trace_call("WHILE_LOOP");
    try {Expression conditional;
  StatementList body;
      jj_consume_token(43);
      jj_consume_token(SEP_LPAREN);
      conditional = EXPRESSION();
      jj_consume_token(SEP_RPAREN);
      jj_consume_token(24);
      body = STATEMENT_LIST();
      jj_consume_token(25);
{if ("" != null) return new WhileLoop(conditional, body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("WHILE_LOOP");
    }
  }

  final public ForLoop FOR_LOOP() throws ParseException {
    trace_call("FOR_LOOP");
    try {VarInitialization init;
  Expression conditional;
  SetOperation setOperation;
  StatementList body;
      jj_consume_token(41);
      jj_consume_token(SEP_LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 34:{
        init = VAR_INITIALIZATION();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      jj_consume_token(29);
      conditional = EXPRESSION();
      jj_consume_token(29);
      setOperation = SET_OPERATION();
      jj_consume_token(SEP_RPAREN);
      jj_consume_token(24);
      body = STATEMENT_LIST();
      jj_consume_token(25);
{if ("" != null) return new ForLoop(init, conditional, setOperation, body);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FOR_LOOP");
    }
  }

  final public Expression EXPRESSION() throws ParseException {
    trace_call("EXPRESSION");
    try {Token op;
  ExpressionHead head;
  Expression tail;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEP_LPAREN:{
        op = jj_consume_token(SEP_LPAREN);
        tail = EXPRESSION();
        jj_consume_token(SEP_RPAREN);
        break;
        }
      case OP_EXCL:{
        op = jj_consume_token(OP_EXCL);
        tail = EXPRESSION();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        if (jj_2_5(3)) {
          head = EXPRESSION_HEAD();
          op = jj_consume_token(OP_ASL);
          tail = EXPRESSION();
        } else if (jj_2_6(3)) {
          head = EXPRESSION_HEAD();
          op = jj_consume_token(OP_ASR);
          tail = EXPRESSION();
        } else if (jj_2_7(3)) {
          head = EXPRESSION_HEAD();
          op = jj_consume_token(OP_LSL);
          tail = EXPRESSION();
        } else if (jj_2_8(3)) {
          head = EXPRESSION_HEAD();
          op = jj_consume_token(OP_LSR);
          tail = EXPRESSION();
        } else if (jj_2_9(3)) {
          head = EXPRESSION_HEAD();
          op = jj_consume_token(OP_LTE);
          tail = EXPRESSION();
        } else if (jj_2_10(3)) {
          head = EXPRESSION_HEAD();
          op = jj_consume_token(OP_GTE);
          tail = EXPRESSION();
        } else if (jj_2_11(3)) {
          head = EXPRESSION_HEAD();
          op = jj_consume_token(OP_LT);
          tail = EXPRESSION();
        } else if (jj_2_12(3)) {
          head = EXPRESSION_HEAD();
          op = jj_consume_token(OP_GT);
          tail = EXPRESSION();
        } else if (jj_2_13(3)) {
          head = EXPRESSION_HEAD();
          op = jj_consume_token(OP_PLUS);
          tail = EXPRESSION();
        } else if (jj_2_14(3)) {
          head = EXPRESSION_HEAD();
          op = jj_consume_token(OP_HYPHEN);
          tail = EXPRESSION();
        } else if (jj_2_15(3)) {
          head = EXPRESSION_HEAD();
          op = jj_consume_token(OP_ASTER);
          tail = EXPRESSION();
        } else if (jj_2_16(3)) {
          head = EXPRESSION_HEAD();
          op = jj_consume_token(OP_SLASH);
          tail = EXPRESSION();
        } else if (jj_2_17(3)) {
          head = EXPRESSION_HEAD();
          op = jj_consume_token(OP_CARET);
          tail = EXPRESSION();
        } else if (jj_2_18(3)) {
          head = EXPRESSION_HEAD();
          op = jj_consume_token(OP_PERCENT);
          tail = EXPRESSION();
{if ("" != null) return new Expression(op, head, tail);}
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("EXPRESSION");
    }
  }

  final public ExpressionHead EXPRESSION_HEAD() throws ParseException {
    trace_call("EXPRESSION_HEAD");
    try {FunctionCall func;
  Token id;
  Token referenceName;
  Token value;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 33:{
        func = FUNCTION_CALL();
{if ("" != null) return new FunctionCall(func);}
        break;
        }
      case IDENTIFIER:{
        id = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Variable(id.getImage());}
        break;
        }
      case REFERENCE:{
        referenceName = jj_consume_token(REFERENCE);
{if ("" != null) return new Variable(referenceName.getImage());}
        break;
        }
      case LIT_GENERAL:{
        value = jj_consume_token(LIT_GENERAL);
{if ("" != null) return new Variable(value.getImage());}
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("EXPRESSION_HEAD");
    }
  }

  final public FunctionCall FUNCTION_CALL() throws ParseException {
    trace_call("FUNCTION_CALL");
    try {Token id;
  ValueList valueList;
      jj_consume_token(33);
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(SEP_LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OP_EXCL:
      case SEP_LPAREN:
      case 33:
      case IDENTIFIER:
      case REFERENCE:
      case LIT_GENERAL:{
        valueList = VALUE_LIST();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(SEP_RPAREN);
{if ("" != null) return new FunctionCall(id, valueList);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("FUNCTION_CALL");
    }
  }

  final public ValueList VALUE_LIST() throws ParseException {
    trace_call("VALUE_LIST");
    try {Expression exprHead;
  List<Expression> exprList;
  Expression exprTail;
      exprHead = EXPRESSION();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 28:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        jj_consume_token(28);
        exprTail = EXPRESSION();
exprList.add(exprTail);
      }
{if ("" != null) return new ValueList(exprHead, exprList);}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("VALUE_LIST");
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    }
    }
    if (jj_scan_token(29)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(38)) return true;
    if (jj_scan_token(37)) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_10()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(37)) return true;
    if (jj_scan_token(SEP_LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  private boolean jj_3R_12()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(OP_PERCENT)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(OP_CARET)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(OP_SLASH)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(OP_ASTER)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_scan_token(42)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(OP_HYPHEN)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(OP_PLUS)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(OP_GT)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(OP_LT)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(OP_GTE)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_scan_token(34)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(OP_LTE)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(OP_LSR)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(OP_LSL)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(OP_ASR)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_10()) return true;
    if (jj_scan_token(OP_ASL)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_9()
 {
    if (jj_scan_token(34)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(OP_EXCL)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_11()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(SEP_LPAREN)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_8()
 {
    if (jj_scan_token(35)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OP_EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    if (jj_scan_token(41)) return true;
    if (jj_scan_token(SEP_LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(43)) return true;
    if (jj_scan_token(SEP_LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_scan_token(33)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(SEP_LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(LIT_GENERAL)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(REFERENCE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x10000000,0x401000,0x401000,0x0,0x401000,0x0,0x0,0x401000,0x0,0x401000,0x10000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10,0x100,0x0,0x7e2e,0x7406,0xa20,0x7002,0x40,0x4,0x0,0x7002,0x7002,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[18];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 18; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
